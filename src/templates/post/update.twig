{% extends "_layouts/admin_layout.twig" %}

{% block content %}

    {% include "_partials/adminPageOpen.twig" %}

    <div>
        <nav class="block text-sm text-left text-gray-600 h-12 flex items-center rounded-md">
            <ol class="list-none flex text-grey-dark p-0">
                <li><a class="no-underline text-gray-600 font-bold" href="/dashboard">Dashboard</a></li>
                <li class="mx-2">/</li>
                <!-- <li><a class="no-underline text-gray-600 font-bold" href="#">Library</a></li>
                <li class="mx-2">/</li> -->
                <li class="">Update Post</li>
            </ol>
        </nav>
    </div>

    <div id="updatePost">

        <div class="flex w-full">
            <div class="mb-4">
                {% set adminPageTitle = "Update Post" %}
                {% include"_partials/adminPageHeading.twig" %}
            </div>
            <div class="flex-auto"></div>
            <div>
                <a class="{% include "_styles/blueButton.twig" %}" @click.prevent="savePost()">Save</a>
            </div>
        </div>



        <!-- Post Title -->
        <div class="mb-4">
            <label class="block text-gray-700 text-sm font-bold uppercase mb-2" for="title">Title</label>
            <input
                    class="{% include "_styles/textBox.twig" %}"
                    id="title"
                    type="text"
                    name="title"
                    v-model="title"
                    required
            />
        </div>


        <div v-for="(elementId, index) in elementsOrder" :key="index" class="my-4">
            <div v-if="pageElements[elementId].type === 'heading'">
                {% set elementType = "Heading" %}
                {% include "_partials/postElement.twig" %}
            </div>
            <div v-if="pageElements[elementId].type === 'editor'">
                {% set elementType = "Editor" %}
                {% include "_partials/postElement.twig" %}
            </div>

            <div v-if="pageElements[elementId].type === 'picture'">
                {% set elementType = "Picture" %}
                {% include "_partials/postElement.twig" %}
            </div>

        </div>





        {% include "_partials/addElementBar.twig" %}
    </div>

    {% include "_partials/adminPageClose.twig" %}
{% endblock %}


{% block vuejs %}

    <script src="https://cdn.quilljs.com/1.3.4/quill.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/vue-quill-editor@3.0.4/dist/vue-quill-editor.js"></script>
    <link href="https://cdn.quilljs.com/1.3.4/quill.core.css" rel="stylesheet">
    <link href="https://cdn.quilljs.com/1.3.4/quill.snow.css" rel="stylesheet">
    <link href="https://cdn.quilljs.com/1.3.4/quill.bubble.css" rel="stylesheet">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/axios/0.19.2/axios.min.js" integrity="sha256-T/f7Sju1ZfNNfBh7skWn0idlCBcI3RwdLSS4/I7NQKQ=" crossorigin="anonymous"></script>


    <script>
        let updatePostApp = new Vue({
            name: 'updatePost',
            el: '#updatePost',
            delimiters: ['%%','%%'],
            components: {
                LocalQuillEditor: VueQuillEditor.quillEditor
            },
            computed: {},
            data: {
                file: ``,
                editorOption: {
                    theme: 'snow',
                    modules: {
                        toolbar: [
                            ['bold', 'italic', 'underline', 'strike'],
                            [{ 'list': 'ordered'}, { 'list': 'bullet' }],
                            [{ 'header': [1, 2, 3, 4, 5, 6, false] }],
                            [{ 'color': [] }, { 'background': [] }],
                            [{ 'font': [] }],
                            [{ 'align': [] }],
                            ['link'],
                        ]
                    },
                },
                pageElements: { {% include "_partials/pageElementsTwigLoop.twig" %} },
                objectIndex: {{ post.elements | length }},
                elementsOrder : [{% if post.elements | length %}{% for e in post.elements %}{{ e.order }} {% if not loop.last %},{% endif %}{% endfor %}{% endif %}],
                title: `{{ post.title }}`,
            },
            methods: {
                createElement(type) {
                    this.$set(this.pageElements, this.objectIndex, {
                        type: type,
                        data: ``,
                        elementId: this.objectIndex,
                        order : this.objectIndex,
                        render: false,
                        id: -1,
                        post: {{ post.id }},
                    })
                    this.elementsOrder.push(this.objectIndex)
                    this.objectIndex++
                },
                swapElements(a,b) {
                    let c = this.elementsOrder[b]
                    let d = this.elementsOrder[a]
                    this.pageElements[a].order = c
                    this.pageElements[b].order = d
                    this.elementsOrder.splice(a,1, c)
                    this.elementsOrder.splice(b,1, d)
                },
                savePost() {
                    let postPayload = [];
                    let elements = [];
                    for (let i = 0; i<this.elementsOrder.length; i++) {
                        elements[i] = this.pageElements[i];
                    }
                    postPayload = {
                        title: this.title,
                        elements: elements
                    }
                    console.log("post payload");
                    console.log(JSON.stringify(postPayload))

                    axios.post("{{ site_url }}api/post/update/{{ post.id }}", postPayload).then(savePostResponse => {
                        if (savePostResponse.data.success === true) {
                            location.href = "{{ site_url }}dashboard";
                        }
                    })
                }, // save post
                handleFileUpload(e) {
                    this.file = e.target.files[0];
                    let formData = new FormData();
                    formData.append('fileUpload', this.file);
                    let header = {
                        headers: {
                            'Content-Type': 'multipart/form-data'
                        }
                    }
                    axios.post( '{{ site_url }}api/files/upload', formData, header
                    ).then( response => {
                        if (response.data.success === true) {
                            console.log('success');
                        } else {
                            console.log("failure: " + response.data.message)
                        }

                    })
                    .catch(function(){
                        console.log('FAILURE!!');
                    });
                },
            },
            created() {},
        })

    </script>



{% endblock %}